<launch>

  <machine name="casey"    address="casey_vpn"    user="casey" 	    env-loader="/opt/ros/indigo/rel_nav_env.sh"/>
  <machine name="splinter" address="splinter_vpn" user="splinter" 	env-loader="/opt/ros/indigo/rel_nav_env.sh"/>
  <machine name="laptop"   address="laptop_vpn"   user="gps-denied" env-loader="/opt/ros/indigo/rel_nav_env.sh"/>
  <machine name="odroid"   address="odroid_vpn"   user="odroid"     env-loader="/opt/ros/indigo/rel_nav_env.sh"/>

  <arg name="mav_name" default="shredder"/>

 <!-- Set non-default parameters -->
 <rosparam subst_value="True">
  truth:          { use_vo_keyframes: false }
  joy_commander:  { max_velocity: 1.5,
                    initial_desired_z: -1.0 }
  xbox:           { deadzone: 0.15,
                    autorepeat_rate: 10}
  hex_sim:        { sensor_noise: false }
  path_planner_cmu: { kg: 1.5, ko: -1.0,
                      c1: 1.0, c2: 0.25,
                      c3: 1.0, c4: 1.0 }


 </rosparam>  
 
 <!--Low Level Path Planning -->
 <rosparam command="load" file="$(find joy_commander)/params/ps2.yaml"/>
 <node name="xbox"                pkg="joy"                 type="joy_node"/>
 <node name="rotor_sim_joy" pkg="rotor_sim_joy" type="rotor_sim_joy" />
  <!-- <node name="planner_toggle"      pkg="joy_commander"        type="path_planner_toggle_node" output="screen">
    <remap from="desired_state" to="raw_desired_state"/></node>
  <node name="velocity_planner"    pkg="velocity_planner"    type="velocity_planner_node" output="screen">
    <remap from="desired_state" to="planner_desired_state"/></nodes> -->
  <!-- <node name="joy_commander"        pkg="joy_commander"        type="joy_commander_node" output="screen"> -->
    <!-- <remap from="desired_state" to="raw_desired_state"/>  -->
  <!-- </node> -->
  <!-- <node name="path_planner" pkg="path_planner_hotdog" type="path_planner_hotdog"/> -->
  <!-- <node name="obstacle_avoid" pkg="obstacle_avoidance" type="obstacle_avoidance_node" output="screen"/> -->
  <!-- <node name="path_planner_cmu" pkg="path_planner_cmu" type="path_planner_cmu" output="screen"> -->
    <!-- <remap from="planned_desired_state" to="desired_state"/> -->
  <!-- </node> -->

 <!--Control-->
 <!-- <rosparam command="load" file="$(find rotor_controller)/gains/pid.yaml"/> -->
 <!-- <node name="pid_controller"      pkg="rotor_controller"    type="rotor_controller_pid"  output="screen"/> -->


  <!-- Simulator -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find rotor_gazebo)/worlds/powerplant.world"/>
    <arg name="paused" value="false"/>
    <arg name="gui" value="true"/>
  </include>
  <node name="laser_tf" pkg="tf" type="static_transform_publisher" args="0 0 0 0 0 0  /laser_link /base_laser_link 100"/>
  <node name="laser_tf2" pkg="tf" type="static_transform_publisher" args="0 0 0 0 0 0 /shredder/ground_truth /laser_link 100"/>
  <include file="$(find rotor_gazebo)/launch/spawn_mav.launch">
    <arg name="mav_name"            value="$(arg mav_name)" />
    <arg name="model"               value="$(find rotor_gazebo)/urdf/$(arg mav_name)_base.xacro" />
    <arg name="enable_logging"      value="false" />
    <arg name="enable_ground_truth" value="true" />
    <arg name="log_file"            value=""/>
    <arg name="z"                   value="1.0"/>
  </include>
  <group ns="$(arg mav_name)">
    <node name="attitude_controller" pkg="attitude_controller" type="attitude_controller_node" output="screen" >
      <rosparam command="load" file="$(find attitude_controller)/param/$(arg mav_name).yaml"/>
      <rosparam command="load" file="$(find rotor_gazebo)/param/$(arg mav_name).yaml"/>
      <remap from="odometry" to="ground_truth/odometry"/>
      <remap from="command" to="/command"/>
    </node>
    <node name="sim_reset" pkg="sim_reset" type="sim_reset_node">
      <remap from="joy" to="/joy"/>
      <remap from="gazebo/set_model_state" to="/gazebo/set_model_state"/>
    </node>
  </group>

  <!-- Truth -->
  <node name="truth" pkg="rotor_estimator" type="truth">
    <param name="use_vo_keyframes" value="false"/>
    <remap from="pose" to="$(arg mav_name)/ground_truth/pose_with_covariance"/>
  </node>
  

 <!-- Visualization -->
 <!-- <node name="map_rviz" pkg="rviz" type="rviz" args="-d /home/iman/obstacle/src/hex_map/rviz/map_visualizer.rviz" /> -->
 <node name="simulator_rviz" pkg="rviz" type="rviz" args="-d /home/iman/obstacle/src/relative_nav_launch/rviz/FPV_map.rviz"/>
 <!-- <node name="rqt_graph"         pkg="rqt_graph" type="rqt_graph"/> -->

  <!--Record-->
  <!-- <node name="record" pkg="rosbag" type="record" args="-o OA_collect /scan /imu/data /mavros/distance_sensor /vo /keyframe /relative_state /node /edge /goal /raw_desired_state /desired_state"/> -->

</launch>
